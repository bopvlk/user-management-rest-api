// Code generated by MockGen. DO NOT EDIT.
// Source: git.foxminded.com.ua/3_REST_API/interal/interface/repository (interfaces: UserRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "git.foxminded.com.ua/3_REST_API/interal/domain/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(arg0 context.Context, arg1 *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), arg0, arg1)
}

// DeleteOwnUser mocks base method.
func (m *MockUserRepository) DeleteOwnUser(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOwnUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOwnUser indicates an expected call of DeleteOwnUser.
func (mr *MockUserRepositoryMockRecorder) DeleteOwnUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOwnUser", reflect.TypeOf((*MockUserRepository)(nil).DeleteOwnUser), arg0, arg1)
}

// DeleteUserByID mocks base method.
func (m *MockUserRepository) DeleteUserByID(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByID indicates an expected call of DeleteUserByID.
func (mr *MockUserRepositoryMockRecorder) DeleteUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByID", reflect.TypeOf((*MockUserRepository)(nil).DeleteUserByID), arg0, arg1)
}

// FindOneUserByID mocks base method.
func (m *MockUserRepository) FindOneUserByID(arg0 context.Context, arg1 uint) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneUserByID", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneUserByID indicates an expected call of FindOneUserByID.
func (mr *MockUserRepositoryMockRecorder) FindOneUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneUserByID", reflect.TypeOf((*MockUserRepository)(nil).FindOneUserByID), arg0, arg1)
}

// FindOneUserByUserNameAndPassword mocks base method.
func (m *MockUserRepository) FindOneUserByUserNameAndPassword(arg0 context.Context, arg1, arg2 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneUserByUserNameAndPassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneUserByUserNameAndPassword indicates an expected call of FindOneUserByUserNameAndPassword.
func (mr *MockUserRepositoryMockRecorder) FindOneUserByUserNameAndPassword(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneUserByUserNameAndPassword", reflect.TypeOf((*MockUserRepository)(nil).FindOneUserByUserNameAndPassword), arg0, arg1, arg2)
}

// FindUsers mocks base method.
func (m *MockUserRepository) FindUsers(arg0 context.Context, arg1 *models.Pagination) (*models.Pagination, []*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUsers", arg0, arg1)
	ret0, _ := ret[0].(*models.Pagination)
	ret1, _ := ret[1].([]*models.User)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindUsers indicates an expected call of FindUsers.
func (mr *MockUserRepositoryMockRecorder) FindUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsers", reflect.TypeOf((*MockUserRepository)(nil).FindUsers), arg0, arg1)
}

// RateUserByUsername mocks base method.
func (m *MockUserRepository) RateUserByUsername(arg0 context.Context, arg1 uint, arg2, arg3 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RateUserByUsername", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RateUserByUsername indicates an expected call of RateUserByUsername.
func (mr *MockUserRepositoryMockRecorder) RateUserByUsername(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RateUserByUsername", reflect.TypeOf((*MockUserRepository)(nil).RateUserByUsername), arg0, arg1, arg2, arg3)
}

// UpdateOwnUser mocks base method.
func (m *MockUserRepository) UpdateOwnUser(arg0 context.Context, arg1 int, arg2 *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOwnUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOwnUser indicates an expected call of UpdateOwnUser.
func (mr *MockUserRepositoryMockRecorder) UpdateOwnUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOwnUser", reflect.TypeOf((*MockUserRepository)(nil).UpdateOwnUser), arg0, arg1, arg2)
}

// UpdateUserByID mocks base method.
func (m *MockUserRepository) UpdateUserByID(arg0 context.Context, arg1 int, arg2 *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserByID indicates an expected call of UpdateUserByID.
func (mr *MockUserRepositoryMockRecorder) UpdateUserByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserByID", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserByID), arg0, arg1, arg2)
}
