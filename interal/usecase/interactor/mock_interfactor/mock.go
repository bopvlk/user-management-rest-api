// Code generated by MockGen. DO NOT EDIT.
// Source: user_interfactor.go

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	context "context"
	reflect "reflect"
	time "time"

	models "git.foxminded.com.ua/3_REST_API/interal/domain/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUserInteractor is a mock of UserInteractor interface.
type MockUserInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockUserInteractorMockRecorder
}

// MockUserInteractorMockRecorder is the mock recorder for MockUserInteractor.
type MockUserInteractorMockRecorder struct {
	mock *MockUserInteractor
}

// NewMockUserInteractor creates a new mock instance.
func NewMockUserInteractor(ctrl *gomock.Controller) *MockUserInteractor {
	mock := &MockUserInteractor{ctrl: ctrl}
	mock.recorder = &MockUserInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserInteractor) EXPECT() *MockUserInteractorMockRecorder {
	return m.recorder
}

// DeleteSigner mocks base method.
func (m *MockUserInteractor) DeleteSigner(ctx context.Context, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSigner", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSigner indicates an expected call of DeleteSigner.
func (mr *MockUserInteractorMockRecorder) DeleteSigner(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSigner", reflect.TypeOf((*MockUserInteractor)(nil).DeleteSigner), ctx, user)
}

// FindOneSigner mocks base method.
func (m *MockUserInteractor) FindOneSigner(ctx context.Context, id uint) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneSigner", ctx, id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneSigner indicates an expected call of FindOneSigner.
func (mr *MockUserInteractorMockRecorder) FindOneSigner(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneSigner", reflect.TypeOf((*MockUserInteractor)(nil).FindOneSigner), ctx, id)
}

// FindSigners mocks base method.
func (m *MockUserInteractor) FindSigners(ctx context.Context, pagination *models.Pagination) (*models.Pagination, []*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSigners", ctx, pagination)
	ret0, _ := ret[0].(*models.Pagination)
	ret1, _ := ret[1].([]*models.User)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindSigners indicates an expected call of FindSigners.
func (mr *MockUserInteractorMockRecorder) FindSigners(ctx, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSigners", reflect.TypeOf((*MockUserInteractor)(nil).FindSigners), ctx, pagination)
}

// SignIn mocks base method.
func (m *MockUserInteractor) SignIn(ctx context.Context, name, password string) (*time.Duration, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, name, password)
	ret0, _ := ret[0].(*time.Duration)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignIn indicates an expected call of SignIn.
func (mr *MockUserInteractorMockRecorder) SignIn(ctx, name, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockUserInteractor)(nil).SignIn), ctx, name, password)
}

// SignUp mocks base method.
func (m *MockUserInteractor) SignUp(ctx context.Context, user *models.User) (*time.Duration, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, user)
	ret0, _ := ret[0].(*time.Duration)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUserInteractorMockRecorder) SignUp(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUserInteractor)(nil).SignUp), ctx, user)
}
